delta_protein_properties.R:delta_v_min <- function(prot1, prot2)
delta_protein_properties.R:delta_g_entropy <- function(prot1, prot2)
delta_protein_properties.R:delta_v_stress <- function(prot1, prot2)
delta_protein_properties.R:delta_v_activation <- function(prot1, prot2)
delta_protein_properties.R:delta_g_entropy_activation <- function(prot1, prot2)
delta_protein_properties.R:  dr2_site <- function(prot1, prot2) {
delta_protein_properties.R:  de2_site <- function(prot1, prot2) {
delta_protein_properties.R:  df2_site <- function(prot1, prot2) {
delta_protein_properties.R:  dr2_nm <- function(prot1, prot2) {
delta_protein_properties.R:  de2_nm <- function(prot1, prot2) {
delta_protein_properties.R:  df2_nm <- function(prot1, prot2) {
enm_add.R:enm_add <- function(prot, model, d_max, frustrated,...)  {
enm_add.R:enm_set_xyz <- function(xyz, pdb_site, model,  d_max, frustrated,...) {
enm_add.R:  function(xyz,
enm_add.R:    # set function to calculate i-j spring constants
enm_add.R:dij_edge <- function(xyz,i,j) {
enm_add.R:sdij_edge <- function(pdb_site,i,j) {
enm_add.R:eij_edge <- function(xyz,i,j) {
enm_add.R:kmat_graph <- function(graph, eij, nsites, frustrated) {
enm_energy.R:enm_energy <- function(prot, ideal, beta = beta_boltzmann()) {
enm_energy.R:energy <- function(...) {
enm_energy.R:  stop("function energy renamed; call enm_energy")
enm_energy.R:enm_v_min <- function(prot) {
enm_energy.R:enm_dv_activation <- function(prot,ideal) {
enm_energy.R:enm_v_stress <- function(prot,ideal) {
enm_energy.R:v_dij <- function(dij,v0ij,kij,lij) {
enm_energy.R:enm_g_entropy <- function(prot, beta) {
enm_energy.R:enm_g_entropy_activation <- function(prot, beta) {
enm_energy.R:enm_g_entropy_mode <- function(energy, beta) {
enm_kij_functions.R:kij_anm  <- function(dij, d_max = 10, k = 1,  ...) {
enm_kij_functions.R:kij_gnm <- function(dij, d_max = 10, k = 1, ...) {
enm_kij_functions.R:kij_hnm <- function(dij, ...){
enm_kij_functions.R:kij_hnm0 <- function(dij, c = 7.5, a = 1, ...) {
enm_kij_functions.R:kij_ming_wall <- function(dij, sdij,
enm_kij_functions.R:kij_pfgnm <- function(dij, ...) {
enm_kij_functions.R:kij_reach <- function(dij, sdist = 5, same.chain = T, ...) {
enm_nma.R:enm_nma <- function(kmat, TOL = 1.e-5) {
enm_nma.R:enm_nma_basis <- function(kmat, umat0, nbasis = ncol(umat0), TOL = 1.e-5) {
get_protein_properties.R:get_v_min  <- function(prot) prot$energy$v_min
get_protein_properties.R:get_g_entropy <- function(prot) prot$energy$g_entropy
get_protein_properties.R:get_v_stress <- function(prot) prot$energy$v_stress
get_protein_properties.R:get_dv_activation <- function(prot) prot$energy$dv_activation
get_protein_properties.R:get_g_entropy_activation <- function(prot) prot$energy$g_entropy_activation
get_protein_properties.R:get_profiles_site <-  function(prot, d_max) {
get_protein_properties.R:get_site  <- function(prot) prot$site
get_protein_properties.R:get_pdb_site <- function(prot) prot$site
get_protein_properties.R:get_bfactor <- function(prot) prot$bfactor
get_protein_properties.R:get_cn <- function(prot, d_max) cn_xyz(prot$xyz, d_max)
get_protein_properties.R:get_wcn <- function(prot) wcn_xyz(prot$xyz)
get_protein_properties.R:get_msf_site <- function(prot) {
get_protein_properties.R:get_mode <- function(prot) prot$enm$mode
get_protein_properties.R:get_evalue <- function(prot) prot$enm$evalue
get_protein_properties.R:get_msf_mode <-  function(prot) 1 / get_evalue(prot)
init_prot.R:init_prot <- function(prot, pdb_site_active = NA,
init_prot.R:add_site_indexes <- function(prot, pdb_site_active) {
lfenm_functions.R:#' @family enm mutating functions
lfenm_functions.R:get_mutant_site <- function(wt, site_mut, mutation = 0,
lfenm_functions.R:#' @family enm mutating functions
lfenm_functions.R:get_force <- function(wt, mut) {
lfenm_functions.R:mutate_enm <- function(prot, model, d_max, frustrated) {
lfenm_functions.R:mutate_graph <- function(mut, model, d_max) {
lfenm_functions.R:mutate_eij <- function(mut) {
lfenm_functions.R:enm_update <- function(...) {
penm-package.R:#' For proteins, the \code{penm} package includes functions to calculate various Elastic Network Models,
read_pdb.R:#' @family pdb input functions
read_pdb.R:pdb_file_check <- function(pdb_id, chain = NA_character_, path, prefix = "") {
read_pdb.R:#' @family pdb input functions
read_pdb.R:read_pdb_sc <- function(pdb_id, chain = NA_character_, path, prefix = "") {
read_pdb.R:#' @family pdb input functions
read_pdb.R:read_pdb_ca <- function(pdb_id, chain = NA_character_, path, prefix = "") {
side_chain_functions.r:residue.coordinates = function(pdb,d=1.5) {
side_chain_functions.r:residue.bfactors = function(pdb) {
side_chain_functions.r:vnorm = function(v)  sqrt(sum(v^2))
side_chain_functions.r:theta = function(v1,v2) {
side_chain_functions.r:distance = function(r1,r2) {
side_chain_functions.r:qb.levitt = function(ca.xyz,l=3,theta=37.6){
side_chain_functions.r:qb.micheletti = function(ca.xyz,l=3){
side_chain_functions.r:bfactor.levitt = function(ca.bfactor){
side_chain_functions.r:bfactor.micheletti = function(ca.bfactor){
utility_functions.R:beta_boltzmann <- function(R = 1.986e-3, T = 298) 1/(R*T)
utility_functions.R:my_as_xyz <- function(r) {
utility_functions.R:dr2_xyz <- function(xyz_1, xyz_2) {
utility_functions.R:wcn_xyz <- function(xyz, ...) {
utility_functions.R:cn_xyz <-  function(xyz, d_max) {
utility_functions.R:cn_graph <- function(graph, nsites) {
utility_functions.R:reduce_matrix <- function(full.matrix) {
utility_functions.R:contact_number <- function(d_ij,d_max=12.5) {
utility_functions.R:distance_to_active <- function(xyz,site_active) {
utility_functions.R:site_to_ind <- function(site) {
utility_functions.R:my_quad_form <- function(x,m,y) {
