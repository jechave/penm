
#' calcualte all response matrices and profiles
#'
prs_all.new <- function(wt, nmut_per_site, mut_model, mut_dl_sigma, mut_sd_min, seed = 241956) {
  cmat <- get_cmat(wt)
  cmat_sqrt <- get_cmat_sqrt(wt)
  idmat <- diag(1, 3 * get_nsites(wt), 3 * get_nsites(wt))


  dat <- tibble(j = get_site(wt)) %>%
    mutate(fj  = map(j, generate_fmat_site,
                     wt = wt, nmut = nmut_per_site, mut_dl_sigma = mut_dl_sigma, mut_sd_min = mut_sd_min, seed = seed)) %>%
    mutate(i = map(j, ~get_site(wt))) %>%
    mutate(df2ij = map(fj, calculate_s2i, amat = idmat)) %>%
    mutate(dr2ij = map(fj, calculate_s2i, amat = cmat)) %>%
    mutate(de2ij = map(fj, calculate_s2i, amat = cmat_sqrt)) %>%
    select(-fj) %>%
    unnest(c(i, df2ij, dr2ij, de2ij)) %>%
    arrange(i, j, df2ij, dr2ij, de2ij)
  dat
}

#' Generate nmut "mutational" forces
#'
#' f(i, m) is force at site i for mutation m = c(1,...nmut), at site site_mut
#'
generate_fmat_site <- function(site_mut, wt, nmut, mut_dl_sigma, mut_sd_min,  seed) {

  mutation = seq(nmut)
  nsites <- get_nsites(wt)
  nedges <- nrow(get_graph(wt))

  dlij <- matrix(NA, nedges, nmut)
  f <- matrix(NA, 3 * nsites, nmut)

  for (m in mutation) {
    set.seed(seed + site_mut * m)
    dlij[, m] <- get_delta_lij(wt, site_mut, mut_sd_min, mut_dl_sigma)
    f[, m] <- get_force(wt, dlij[, m])
  }

  f

}



calculate_s2i  <- function(f, amat) {
  nzf <- !near(rowMeans(f^2), 0)
  smat <- amat[,nzf] %*% f[nzf,]
  dim(smat) = c(3, nrow(smat)/3, ncol(smat))
  apply(smat^2, c(2, 3), sum) %>%
    rowMeans()
}



#' calcualte all fast response matrices
#'
prs.old <- function(wt, nmut_per_site, mut_model, mut_dl_sigma, mut_sd_min) {

  mutants <- generate_mutants(wt, nmut_per_site, mut_model, mut_dl_sigma, mut_sd_min)
  mutants %>%
    calculate_dr2ij.prs() %>%
    inner_join(calculate_df2ij.prs(mutants)) %>%
    inner_join(calculate_de2ij.prs(mutants))  %>%
    group_by(i, j) %>%
    summarise(dr2ij = mean(dr2ij),
              df2ij = mean(df2ij),
              de2ij = mean(de2ij))

}



#' calcualte stress energy change vector dvsjm
#'
#'dvsjm is dvs at site j, for mutations m = c(1, 2, 3, ..., nmut_per_site)
#'
calculate_dvsjm.new <- function(wt, nmut_per_site, mut_dl_sigma, mut_sd_min,  seed =  241956) {

  nsites <- get_nsites(wt)
  site = seq(nsites)
  mutation <- seq(nmut_per_site)

  dvsjm <- matrix(NA, nsites, nmut_per_site)

  for(j in site) {
    for (m in mutation) {
      set.seed(seed + j * m)
      dlij <- get_delta_lij(wt, j, mut_sd_min, mut_dl_sigma)
      dvsjm[j, m] <- sum(1 / 2 * get_graph(wt)$kij * dlij^2)
    }
  }

  dvsjm

}



